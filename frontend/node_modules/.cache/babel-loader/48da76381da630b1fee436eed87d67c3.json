{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inspectString;\n\nvar _helpers = require(\"./helpers\");\n\nconst stringEscapeChars = new RegExp(\"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" + '\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]', 'g');\nconst escapeCharacters = {\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\'\n};\nconst hex = 16;\nconst unicodeLength = 4;\n\nfunction escape(char) {\n  return escapeCharacters[char] || `\\\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`;\n}\n\nfunction inspectString(string, options) {\n  if (stringEscapeChars.test(string)) {\n    string = string.replace(stringEscapeChars, escape);\n  }\n\n  return options.stylize(`'${(0, _helpers.truncate)(string, options.truncate - 2)}'`, 'string');\n}","map":{"version":3,"names":["stringEscapeChars","RegExp","escapeCharacters","hex","unicodeLength","escape","char","charCodeAt","toString","slice","inspectString","string","options","test","replace","stylize","truncate"],"sources":["/Users/taha/Desktop/packet/frontend/node_modules/loupe/lib/string.js"],"sourcesContent":["import { truncate } from './helpers'\n\nconst stringEscapeChars = new RegExp(\n  \"['\\\\u0000-\\\\u001f\\\\u007f-\\\\u009f\\\\u00ad\\\\u0600-\\\\u0604\\\\u070f\\\\u17b4\\\\u17b5\" +\n    '\\\\u200c-\\\\u200f\\\\u2028-\\\\u202f\\\\u2060-\\\\u206f\\\\ufeff\\\\ufff0-\\\\uffff]',\n  'g'\n)\n\nconst escapeCharacters = {\n  '\\b': '\\\\b',\n  '\\t': '\\\\t',\n  '\\n': '\\\\n',\n  '\\f': '\\\\f',\n  '\\r': '\\\\r',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\nconst hex = 16\nconst unicodeLength = 4\nfunction escape(char) {\n  return escapeCharacters[char] || `\\\\u${`0000${char.charCodeAt(0).toString(hex)}`.slice(-unicodeLength)}`\n}\n\nexport default function inspectString(string, options) {\n  if (stringEscapeChars.test(string)) {\n    string = string.replace(stringEscapeChars, escape)\n  }\n  return options.stylize(`'${truncate(string, options.truncate - 2)}'`, 'string')\n}\n"],"mappings":";;;;;;;AAAA;;AAEA,MAAMA,iBAAiB,GAAG,IAAIC,MAAJ,CACxB,gFACE,sEAFsB,EAGxB,GAHwB,CAA1B;AAMA,MAAMC,gBAAgB,GAAG;EACvB,MAAM,KADiB;EAEvB,MAAM,KAFiB;EAGvB,MAAM,KAHiB;EAIvB,MAAM,KAJiB;EAKvB,MAAM,KALiB;EAMvB,KAAK,KANkB;EAOvB,MAAM;AAPiB,CAAzB;AASA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,aAAa,GAAG,CAAtB;;AACA,SAASC,MAAT,CAAgBC,IAAhB,EAAsB;EACpB,OAAOJ,gBAAgB,CAACI,IAAD,CAAhB,IAA2B,MAAM,OAAMA,IAAI,CAACC,UAAL,CAAgB,CAAhB,EAAmBC,QAAnB,CAA4BL,GAA5B,CAAiC,EAAxC,CAA0CM,KAA1C,CAAgD,CAACL,aAAjD,CAAgE,EAAvG;AACD;;AAEc,SAASM,aAAT,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;EACrD,IAAIZ,iBAAiB,CAACa,IAAlB,CAAuBF,MAAvB,CAAJ,EAAoC;IAClCA,MAAM,GAAGA,MAAM,CAACG,OAAP,CAAed,iBAAf,EAAkCK,MAAlC,CAAT;EACD;;EACD,OAAOO,OAAO,CAACG,OAAR,CAAiB,IAAG,IAAAC,iBAAA,EAASL,MAAT,EAAiBC,OAAO,CAACI,QAAR,GAAmB,CAApC,CAAuC,GAA3D,EAA+D,QAA/D,CAAP;AACD"},"metadata":{},"sourceType":"script"}