{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/taha/Desktop/packet/frontend/node_modules/@babel/runtime/helpers/interopRequireDefault.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = inspectTypedArray;\n\nvar _getFuncName = _interopRequireDefault(require(\"get-func-name\"));\n\nvar _helpers = require(\"./helpers\");\n\nconst getArrayName = array => {\n  // We need to special case Node.js' Buffers, which report to be Uint8Array\n  if (typeof Buffer === 'function' && array instanceof Buffer) {\n    return 'Buffer';\n  }\n\n  if (array[Symbol.toStringTag]) {\n    return array[Symbol.toStringTag];\n  }\n\n  return (0, _getFuncName.default)(array.constructor);\n};\n\nfunction inspectTypedArray(array, options) {\n  const name = getArrayName(array);\n  options.truncate -= name.length + 4; // Object.keys will always output the Array indices first, so we can slice by\n  // `array.length` to get non-index properties\n\n  const nonIndexProperties = Object.keys(array).slice(array.length);\n  if (!array.length && !nonIndexProperties.length) return `${name}[]`; // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n  // stylise the toString() value of them\n\n  let output = '';\n\n  for (let i = 0; i < array.length; i++) {\n    const string = `${options.stylize((0, _helpers.truncate)(array[i], options.truncate), 'number')}${i === array.length - 1 ? '' : ', '}`;\n    options.truncate -= string.length;\n\n    if (array[i] !== array.length && options.truncate <= 3) {\n      output += `${_helpers.truncator}(${array.length - array[i] + 1})`;\n      break;\n    }\n\n    output += string;\n  }\n\n  let propertyContents = '';\n\n  if (nonIndexProperties.length) {\n    propertyContents = (0, _helpers.inspectList)(nonIndexProperties.map(key => [key, array[key]]), options, _helpers.inspectProperty);\n  }\n\n  return `${name}[ ${output}${propertyContents ? `, ${propertyContents}` : ''} ]`;\n}","map":{"version":3,"names":["getArrayName","array","Buffer","Symbol","toStringTag","getFuncName","constructor","inspectTypedArray","options","name","truncate","length","nonIndexProperties","Object","keys","slice","output","i","string","stylize","truncator","propertyContents","inspectList","map","key","inspectProperty"],"sources":["/Users/taha/Desktop/packet/frontend/node_modules/loupe/lib/typedarray.js"],"sourcesContent":["import getFuncName from 'get-func-name'\nimport { truncator, truncate, inspectProperty, inspectList } from './helpers'\n\nconst getArrayName = array => {\n  // We need to special case Node.js' Buffers, which report to be Uint8Array\n  if (typeof Buffer === 'function' && array instanceof Buffer) {\n    return 'Buffer'\n  }\n  if (array[Symbol.toStringTag]) {\n    return array[Symbol.toStringTag]\n  }\n  return getFuncName(array.constructor)\n}\n\nexport default function inspectTypedArray(array, options) {\n  const name = getArrayName(array)\n  options.truncate -= name.length + 4\n  // Object.keys will always output the Array indices first, so we can slice by\n  // `array.length` to get non-index properties\n  const nonIndexProperties = Object.keys(array).slice(array.length)\n  if (!array.length && !nonIndexProperties.length) return `${name}[]`\n  // As we know TypedArrays only contain Unsigned Integers, we can skip inspecting each one and simply\n  // stylise the toString() value of them\n  let output = ''\n  for (let i = 0; i < array.length; i++) {\n    const string = `${options.stylize(truncate(array[i], options.truncate), 'number')}${\n      i === array.length - 1 ? '' : ', '\n    }`\n    options.truncate -= string.length\n    if (array[i] !== array.length && options.truncate <= 3) {\n      output += `${truncator}(${array.length - array[i] + 1})`\n      break\n    }\n    output += string\n  }\n  let propertyContents = ''\n  if (nonIndexProperties.length) {\n    propertyContents = inspectList(\n      nonIndexProperties.map(key => [key, array[key]]),\n      options,\n      inspectProperty\n    )\n  }\n  return `${name}[ ${output}${propertyContents ? `, ${propertyContents}` : ''} ]`\n}\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,MAAMA,YAAY,GAAGC,KAAK,IAAI;EAC5B;EACA,IAAI,OAAOC,MAAP,KAAkB,UAAlB,IAAgCD,KAAK,YAAYC,MAArD,EAA6D;IAC3D,OAAO,QAAP;EACD;;EACD,IAAID,KAAK,CAACE,MAAM,CAACC,WAAR,CAAT,EAA+B;IAC7B,OAAOH,KAAK,CAACE,MAAM,CAACC,WAAR,CAAZ;EACD;;EACD,OAAO,IAAAC,oBAAA,EAAYJ,KAAK,CAACK,WAAlB,CAAP;AACD,CATD;;AAWe,SAASC,iBAAT,CAA2BN,KAA3B,EAAkCO,OAAlC,EAA2C;EACxD,MAAMC,IAAI,GAAGT,YAAY,CAACC,KAAD,CAAzB;EACAO,OAAO,CAACE,QAAR,IAAoBD,IAAI,CAACE,MAAL,GAAc,CAAlC,CAFwD,CAGxD;EACA;;EACA,MAAMC,kBAAkB,GAAGC,MAAM,CAACC,IAAP,CAAYb,KAAZ,EAAmBc,KAAnB,CAAyBd,KAAK,CAACU,MAA/B,CAA3B;EACA,IAAI,CAACV,KAAK,CAACU,MAAP,IAAiB,CAACC,kBAAkB,CAACD,MAAzC,EAAiD,OAAQ,GAAEF,IAAK,IAAf,CANO,CAOxD;EACA;;EACA,IAAIO,MAAM,GAAG,EAAb;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,KAAK,CAACU,MAA1B,EAAkCM,CAAC,EAAnC,EAAuC;IACrC,MAAMC,MAAM,GAAI,GAAEV,OAAO,CAACW,OAAR,CAAgB,IAAAT,iBAAA,EAAST,KAAK,CAACgB,CAAD,CAAd,EAAmBT,OAAO,CAACE,QAA3B,CAAhB,EAAsD,QAAtD,CAAgE,GAChFO,CAAC,KAAKhB,KAAK,CAACU,MAAN,GAAe,CAArB,GAAyB,EAAzB,GAA8B,IAC/B,EAFD;IAGAH,OAAO,CAACE,QAAR,IAAoBQ,MAAM,CAACP,MAA3B;;IACA,IAAIV,KAAK,CAACgB,CAAD,CAAL,KAAahB,KAAK,CAACU,MAAnB,IAA6BH,OAAO,CAACE,QAAR,IAAoB,CAArD,EAAwD;MACtDM,MAAM,IAAK,GAAEI,kBAAU,IAAGnB,KAAK,CAACU,MAAN,GAAeV,KAAK,CAACgB,CAAD,CAApB,GAA0B,CAAE,GAAtD;MACA;IACD;;IACDD,MAAM,IAAIE,MAAV;EACD;;EACD,IAAIG,gBAAgB,GAAG,EAAvB;;EACA,IAAIT,kBAAkB,CAACD,MAAvB,EAA+B;IAC7BU,gBAAgB,GAAG,IAAAC,oBAAA,EACjBV,kBAAkB,CAACW,GAAnB,CAAuBC,GAAG,IAAI,CAACA,GAAD,EAAMvB,KAAK,CAACuB,GAAD,CAAX,CAA9B,CADiB,EAEjBhB,OAFiB,EAGjBiB,wBAHiB,CAAnB;EAKD;;EACD,OAAQ,GAAEhB,IAAK,KAAIO,MAAO,GAAEK,gBAAgB,GAAI,KAAIA,gBAAiB,EAAzB,GAA6B,EAAG,IAA5E;AACD"},"metadata":{},"sourceType":"script"}